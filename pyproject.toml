[tool.poetry]
name = "python-api-template"
version = "0.1.0"
description = "Python Microservice Template for API."
authors = [
  "Frank Ricardo Ramirez <frankjony17@gmail.com>",
]
readme = "README.md"
repository = "https://github.com/frankjony17/fastapi-backend-template/tree/main"
packages = [{ include = "python_api_template" }]


[information]
contact = ["FK Team", "frankjony17@gmail.com"]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = { extras = ["all"], version = "^0.111.0" }
pydantic = { extras = ["dotenv"], version = "^2.6.4" }
pydantic-settings = "^2.1.0"
gunicorn = "^22.0.0"
loguru = "^0.7.2"
tomli = "^2.0.1"
httpx = "^0.27.0"
asyncpg = "^0.29.0"
sqlalchemy = { extras = ["asyncio"], version = "^2.0.25" }
sqlalchemy-utils = "^0.41.1"
orjson = "^3.9.10"
pyyaml = "^6.0.1"
prometheus-fastapi-instrumentator = "^7.0.0"
python-dateutil = "^2.8.2"
email-validator = "^2.1.0"
yarl = "^1.9.4"

[tool.poetry.group.dev.dependencies]
uvicorn = { extras = ["standard"], version = "^0.25.0" }
alembic = "^1.13.1"
flake8 = "^7.0.0"
mypy = "^1.8.0"
pylint = "^3.0.3"
bandit = "^1.7.6"
black = "^23.12.1"
isort = "^5.13.2"
asgi-lifespan = "^2.1.0"
types-python-dateutil = "2.8.19.14"
ruff = "^0.4.0"

[tool.poetry.group.test]
[tool.poetry.group.test.dependencies]
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
pytest-httpx = "^0.30.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"

[tool.black]
line-length = 99
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.pylint.format]
max-line-length = 99
ignore-docstrings = false
disable = 'C0114, E0401, R0903, E0611, C0115, E0213, C0116, R0913, E1120, W0212, C0103,  E1102, R0801, E1101, R0901, W1514, W0719, R1710, E1123'


[tool.bandit]
exclude_dirs = ["venv", ".venv", "env", ".env", "scripts"]
skips = [
  "B101",
  "B104",
  "B608",
] # B101: assert_used, B104: hardcoded_bind_all_interfaces, B608: hardcoded_sql_expressions


[tool.isort]
profile = "black"
skip = [
  '.eggs',
  '.git',
  '.hg',
  '.mypy_cache',
  '.nox',
  '.pants.d',
  '.tox',
  '.venv',
  '_build',
  'buck-out',
  'build',
  'dist',
  'node_modules',
  'venv',
]
skip_gitignore = true

[tool.mypy]
plugins = 'pydantic.mypy, sqlalchemy.ext.mypy.plugin'
disallow_untyped_defs = true
disable_error_code = 'attr-defined, no-untyped-def, arg-type, misc'
check_untyped_defs = true
namespace_packages = true
pretty = true
show_error_context = true
exclude = ".venv"

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = ["backoff.*", "opentracing.*"]
ignore_missing_imports = true


[tool.coverage.run]
concurrency = ['multiprocessing']
parallel = true
sigterm = true
branch = true
source = ['python_api_template/']
omit = [".*", "*/test/*"]


[tool.coverage.report]
show_missing = true
sort = 'Miss'
fail_under = 50
skip_empty = true


[tool.coverage.paths]
source = ['python_api_template/']


[tool.pytest]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.pytest.ini_options]
testpaths = "tests"
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test* *Tests"
# addopts = "-vv -x -s"  # -s is equivalent to --capture=no
addopts = "-vv -x"
asyncio_mode = "auto"
pythonpath = ["."]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
